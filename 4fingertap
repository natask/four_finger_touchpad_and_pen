#!/usr/bin/env python3
import subprocess
import threading

# Note your must "sudo gpasswd -a $USER input" then log out/in for
# permission to access the device.
#devstr = ' --device {}'.format(device.get('kernel')) if device else ''
#command = 'stdbuf -oL -- {}{}'.format(cmd_debug_events, devstr)
#cmd = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
def main():
    device = "touchpad"
    result =  subprocess.getoutput(f"cat /proc/bus/input/devices | grep -iA 5 '{device}' | grep event").split()
    filter_result = list(filter(lambda x: x.find("event") != -1,result))
    for device_event in filter_result:
        device_event_index = device_event.find("event")
        device_event_name = device_event[device_event_index:]
        threading.Thread(target=four_finger, args=[device_event_name]).start()

def four_finger(device_event_name):
    cmd = subprocess.Popen(["stdbuf", "-oL", "--", "evtest",f"/dev/input/{device_event_name}"], stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
    # Sit in a loop forever reading the libinput messages ..
    handler = None
    count = 0
    for line in cmd.stdout:
      # to gauge if it is a tap not a swipe. also outputs change in y
      # will change to radius based in the future
      if "(ABS_MT_POSITION_X)," in line:
        count += 1

      # don't waste time on no 4finger taps
      if "(BTN_TOOL_QUADTAP)," not in line:
        continue
      val = line.rstrip()[-1]
      if val == "1":
        count = 0
      else: # val == 0
        if count < 20:
          #subprocess.Popen(["xdotool","key","super+w"])
           subprocess.call(["evemu_do","super+w"]) #call because we want to block

      #print(line) #can optimize here by scanning from the right until first legit char and bit hacks for the loop
      #print(count)

if __name__ == '__main__':
    main()
